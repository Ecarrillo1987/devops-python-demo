name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v3

      - name: 🐍 Configurar Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Instalar dependencias
        run: |
          pip install -r requirements.txt
          pip install flake8 bandit coverage

      - name: ✅ Ejecutar pruebas unitarias
        run: |
          python manage.py test

      - name: 🔍 Análisis de código con flake8
        run: |
          flake8 --max-line-length=120 --exclude=migrations

      - name: 🔍 Escaneo de seguridad con Bandit
        run: |
          bandit -r api/

      - name: 📊 Medir cobertura de código
        run: |
          coverage run manage.py test
          coverage report
          coverage xml

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v3

      - name: 🔑 Login en Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🛠️ Construir y etiquetar imagen Docker
        run: |
          docker build -t chancho1987/devops-demo:v1 .
          docker tag chancho1987/devops-demo:v1 chancho1987/devops-demo:latest

      - name: 🚀 Subir imagen a Docker Hub
        run: |
          docker push chancho1987/devops-demo:v1
          docker push chancho1987/devops-demo:latest

      - name: 🔎 Escaneo de vulnerabilidades con Trivy
        run: |
          docker pull aquasec/trivy
          docker run --rm aquasec/trivy image chancho1987/devops-demo:v1

  deploy-k8s:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
        
    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v2
        
      - name: 🔐 Autenticarse en Google Cloud
        run: |
          echo "${{ secrets.GCLOUD_SERVICE_KEY }}" | base64 --decode > gcloud-key.json
          gcloud auth activate-service-account --key-file=gcloud-key.json
          gcloud config set project balmy-apogee-304919
          gcloud container clusters get-credentials devops-cluster --region=us-east1
        
      - name: 🛠️ Instalar Plugin de Autenticación GKE
        run: |
          echo "📦 Instalando Plugin de Autenticación GKE..."
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin kubectl
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        
      - name: 🔧 Configurar `kubectl` correctamente
        run: |
          echo "📌 Configurando variables para usar el plugin GKE"
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $HOME/.bashrc
          echo "export PATH=$(pwd)/google-cloud-sdk/bin:$PATH" >> $HOME/.bashrc
          source $HOME/.bashrc
          echo "✅ Configuración completada."
        
      - name: 🚀 Verificar `kubectl`
        run: |
          echo "🔍 Verificando `kubectl` y el plugin de autenticación..."
          which gke-gcloud-auth-plugin || echo "❌ El plugin no se encontró en el PATH"
          kubectl version --client
          echo "✅ `kubectl` está listo."
        
      - name: 🚀 Desplegar en Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl get pods
          kubectl get services
        
      - name: 🚀 Desplegar en Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl get pods
          kubectl get services

