name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v3

      - name: 🐍 Configurar Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Instalar dependencias
        run: |
          pip install -r requirements.txt
          pip install flake8 bandit coverage

      - name: ✅ Ejecutar pruebas unitarias
        run: |
          python manage.py test

      - name: 🔍 Análisis de código con flake8
        run: |
          flake8 --max-line-length=120 --exclude=migrations

      - name: 🔍 Escaneo de seguridad con Bandit
        run: |
          bandit -r api/

      - name: 📊 Medir cobertura de código
        run: |
          coverage run manage.py test
          coverage report
          coverage xml

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v3

      - name: 🔑 Login en Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🛠️ Construir y etiquetar imagen Docker
        run: |
          docker build -t chancho1987/devops-demo:v1 .
          docker tag chancho1987/devops-demo:v1 chancho1987/devops-demo:latest

      - name: 🚀 Subir imagen a Docker Hub
        run: |
          docker push chancho1987/devops-demo:v1
          docker push chancho1987/devops-demo:latest

      - name: 🔎 Escaneo de vulnerabilidades con Trivy
        run: |
          docker pull aquasec/trivy
          docker run --rm aquasec/trivy image chancho1987/devops-demo:v1

  deploy-k8s:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v3

      - name: 🔧 Configurar `kubectl`
        run: |
         echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config 
         export KUBECONFIG=$HOME/.kube/config
         kubectl config get-contexts

      - name: 🚀 Desplegar ConfigMap y Secret
        run: |
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml

      - name: 🚀 Desplegar en Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl get pods

